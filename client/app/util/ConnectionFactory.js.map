{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","_createStores","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","target","result","onsuccess","bind","onerror","error","name"],"mappings":";;;;;;AAAA,YAAMA,SAAS,CAAC,aAAD,CAAf;AACA,UAAIC,aAAa,IAAjB;AACA,UAAIC,QAAQ,IAAZ;;AAEO,YAAMC,iBAAN,CAAwB;AAC7BC,sBAAc;AACZ,gBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;AACD,eAAOC,aAAP,CAAqBL,UAArB,EAAiC;AAC/BD,iBAAOO,OAAP,CAAgBC,KAAD,IAAW;AACxB,gBAAIP,WAAWQ,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiD;AAC/CP,yBAAWU,iBAAX,CAA6BH,KAA7B;AACD;AACDP,uBAAWW,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACD,WALD;AAMD;AACD,eAAOC,eAAP,GAAyB;AACvB,cAAIb,UAAJ,EAAgBC;AACjB;AACD,eAAOa,aAAP,GAAuB;AACrB,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,gBAAIjB,UAAJ,EAAgB,OAAOgB,QAAQhB,UAAR,CAAP;AAChB,kBAAMkB,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,wBAAYG,eAAZ,GAA+BC,CAAD,IAAO;AACnCpB,gCAAkBG,aAAlB,CAAgCiB,EAAEC,MAAF,CAASC,MAAzC;AACD,aAFD;;AAIAN,wBAAYO,SAAZ,GAAyBH,CAAD,IAAO;AAC7BtB,2BAAasB,EAAEC,MAAF,CAASC,MAAtB;AACAvB,sBAAQD,WAAWC,KAAX,CAAiByB,IAAjB,CAAsB1B,UAAtB,CAAR;AACAA,yBAAWC,KAAX,GAAmB,MAAM;AACvB,sBAAM,IAAIG,KAAJ,CAAU,6CAAV,CAAN;AACD,eAFD;AAGAY,sBAAQM,EAAEC,MAAF,CAASC,MAAjB;AACD,aAPD;;AASAN,wBAAYS,OAAZ,GAAuBL,CAAD,IAAO;AAC3BL,qBAAOK,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACD,aAFD;AAGD,WApBM,CAAP;AAqBD;AArC4B","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negociacoes\"];\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n  constructor() {\r\n    throw new Error(\"Nao e possivel criar instancias desta classe\");\r\n  }\r\n  static _createStores(connection) {\r\n    stores.forEach((store) => {\r\n      if (connection.objectStoreNames.contains(store)) {\r\n        connection.deleteObjectStore(store);\r\n      }\r\n      connection.createObjectStore(store, { autoIncrement: true });\r\n    });\r\n  }\r\n  static closeConnection() {\r\n    if (connection) close();\r\n  }\r\n  static getConnection() {\r\n    return new Promise((resolve, reject) => {\r\n      if (connection) return resolve(connection);\r\n      const openRequest = indexedDB.open(\"cangaceiroDB\", 1);\r\n\r\n      openRequest.onupgradeneeded = (e) => {\r\n        ConnectionFactory._createStores(e.target.result);\r\n      };\r\n\r\n      openRequest.onsuccess = (e) => {\r\n        connection = e.target.result;\r\n        close = connection.close.bind(connection);\r\n        connection.close = () => {\r\n          throw new Error(\"Voce nao pode fechar a conexao directamente\");\r\n        };\r\n        resolve(e.target.result);\r\n      };\r\n\r\n      openRequest.onerror = (e) => {\r\n        reject(e.target.error.name);\r\n      };\r\n    });\r\n  }\r\n}\r\n"]}